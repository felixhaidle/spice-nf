process GENERATE_LIBRARY {
    memory '2 GB'  // Set a default memory value
    cpus '1'

    input:
        val species          // String: Species name
        val release         // Integer: Ensembl release version
        val outdir             // Path: Output directory

    output:

        path "library/spice_lib_*", emit: library_ch

    script:
    """
    mkdir -p library

    python ${projectDir}/tools/SPICE/spice_library.py \
        --outdir library \
        --species '${species}' \
        --release '${release}'

    """
}


process FAS_ANNOTATION {
    queue 'all'
    executor 'slurm'
    cpus '16'

    input:
        path anno_tools         // Path: Path to annotation tools file
        path spice_library_dir   // Path: Library generated by spice_library.py



    output:
        path "${spice_library_dir}", emit: annotated_library_ch // Declare the generated directory as output




    script:
    """

    # Replace annoTools.txt in spice_library_dir with the one from anno_tools
    cp "${anno_tools}/annoTools.txt" "${spice_library_dir}/fas_data/annoTools.txt"


    # run the annotaion
    source "${anno_tools}/fas.profile"

    fas.doAnno \
        -i "${spice_library_dir}/transcript_data/transcript_set.fasta" \
        -o "${spice_library_dir}/fas_data/" \
        -t "${anno_tools}" \
        -n annotations \
        --cpus ${task.cpus} \

    """
}

process GET_DOMAIN_IMPORTANCE {
    executor 'local'
    cpus '1'

    input:
        path annotated_library // Path: Output from previous step


    output:
        path "${annotated_library}", emit: domain_importance_library_ch



    script:
    """

    python ${projectDir}/tools/SPICE/get_domain_importance.py \
    -i "${annotated_library}/fas_data/annotations.json" \
    -o "${annotated_library}/fas_data/"
    """
}

process RESTRUCTURE_ANNO {
    executor 'local'
    cpus '1'

    input:
        path domain_importance_library // Path: Output from previous step


    output:
        path "${domain_importance_library}", emit: restructured_library_ch
        path "${domain_importance_library}/transcript_data/genes.txt", emit: genes_txt_ch



    script:
    """

    python ${projectDir}/tools/SPICE/restructure_anno.py \
    -i "${domain_importance_library}/fas_data/annotations.json" \
    -o "${domain_importance_library}/fas_data/architectures"
    """
}

process FAS_SCORE_CALCULATION {
    executor 'slurm'
    maxForks 10
    queue 'all'
    cpus '2'
    memory '2G'

    tag "$gene_id"

    input:
        val gene_id // Each gene ID from genes.txt
        path spice_library // Directory containing all necessary files
        path anno_tools //path to annotools.txt


    output:
        path "fas_scores/*", emit: fas_scored_directories, optional: true

    script:
    """
    # Ensure output directory exists
    mkdir -p "fas_scores"


    # Run FASResultHandler to unpack and process the gene
    echo "Starting: Unpacking gene ${gene_id}"
    python ${projectDir}/tools/SPICE/FASResultHandler.py \
        --pairings_path ${spice_library}/transcript_data/transcript_pairings.json \
        --gene_id ${gene_id} \
        --mode unpack \
        --out_dir "./"
    echo "Finished: Unpacking gene ${gene_id}"

    # Check if the pairwise TSV file was created
    if [ -f "${gene_id}.tsv" ]; then

        mkdir -p "fas_scores/${gene_id}"

        # Run FAS analysis using fas.run
        echo "Starting: FAS analysis for gene ${gene_id}"
        fas.run \
            --seed "${spice_library}/transcript_data/annotations.fasta" \
            --query "${spice_library}/transcript_data/annotations.fasta" \
            --annotation_dir "${spice_library}/fas_data" \
            --out_dir "fas_scores/${gene_id}" \
            --bidirectional \
            --pairwise "${gene_id}.tsv" \
            --out_name "${gene_id}" \
            --tsv \
            --phyloprofile "${spice_library}/transcript_data/phyloprofile_ids.tsv" \
            --empty_as_1 \
            --featuretypes "${spice_library}/fas_data/annoTools.txt" \
            --toolPath "${anno_tools}" \
            --cpus ${task.cpus}

        echo "Finished: FAS analysis for gene ${gene_id}"

    else
        echo "Pairwise TSV file not found for gene ${gene_id}. Skipping FAS analysis."
    fi

        """
    }

process CONCAT_FAS_SCORES {
    executor 'local'

    cpus '1'
    memory '6G'

    input:
        path fas_scores_dir
        path spice_library // Directory containing all necessary files

    output:
        path "${spice_library}", emit: finished_library


    script:
    """

    # Convert fas_scores_dir input (which could be multiple paths) into a bash array
    fas_dirs=(${fas_scores_dir})


    # Find the first valid .phyloprofile file
    echo "Looking for a .phyloprofile file in gene directories..."

    found_header=0  # Flag to track if the header was found

    for subdir in "\${fas_dirs[@]}"; do
        # Extract gene directory name (basename)
        gene_id=\$(basename "\${subdir}")

        # Construct the expected .phyloprofile file path
        phyloprofile_file="\${subdir}/\${gene_id}.phyloprofile"

        if [[ -f "\${phyloprofile_file}" ]]; then
            echo "Found .phyloprofile file: \${phyloprofile_file}"

            # Extract the first line (header)
            header=\$(head -n 1 "\${phyloprofile_file}")

            # Ensure the output directory exists
            mkdir -p "${spice_library}/fas_data/"

            # Write the header to fas.phyloprofile
            echo "\${header}" > "${spice_library}/fas_data/fas.phyloprofile"

            echo "Extracted header and saved to ${spice_library}/fas_data/fas.phyloprofile"
            found_header=1
            break  # Stop searching after the first valid file is found
        fi
    done

    # Check if we successfully found a .phyloprofile file
    if [[ \$found_header -eq 0 ]]; then
        echo "Warning: No .phyloprofile file found in any gene directory!"
    fi

    # Count how many directories we have
    total=\${#fas_dirs[@]}
    count=0

    for subdir in "\${fas_dirs[@]}"; do
        # Increment the counter
        count=\$((count + 1))

        # Extract the name of the subdirectory
        gene_id=\${subdir}

        echo "[\$count/\$total] Starting: Concatenation for gene \${gene_id}"


        python "${projectDir}/tools/SPICE/FASResultHandler.py" \
            --mode concat \
            --gene_id "\${gene_id}" \
            --out_dir "\${gene_id}" \
            --anno_dir "${spice_library}/fas_data/"

        echo "[\$count/\$total] Finished: Concatenation for gene \${gene_id}"

        #echo "[\$count/\$total] Starting: Cleanup for gene \${gene_id}"
        #python "\${projectDir}/tools/SPICE/FASResultHandler.py" \
        #    --mode delete \
        #    --gene_id "\${gene_id}" \
        #    --out_dir "tmp/fas_\${gene_id}"

        echo "[\${count}/\${total}] Finished: Cleanup for gene \${gene_id}"
    done

    echo "Starting FAS score integration"

        python "${projectDir}/tools/SPICE/FASResultHandler.py" \
            --mode integrate \
            --out_dir "${spice_library}/fas_data/" \
            --anno_dir "${spice_library}/fas_data"

        echo "FAS score integration completed."

    echo "Processing complete. All \$total genes processed."


    """
}


process PARSE_DOMAIN_OUTPUT {
    executor 'local'
    cpus '1'

    input:
        path spice_library // Path: Output from previous step
        val outdir // Output directory path


    output:
        path "${spice_library}", emit: spice_library_ch


    publishDir "${outdir}", mode: 'copy'

    script:
    """

    python ${projectDir}/tools/SPICE/parse_domain_out.py \
    -f "${spice_library}/fas_data/forward.domains" \
    -r "${spice_library}/fas_data/reverse.domains" \
    -m "${spice_library}/fas_data/architectures" \
    -o "${spice_library}/fas_data/architectures/"

    """
}
