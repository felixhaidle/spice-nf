process GENERATE_LIBRARY {
    memory '2 GB'  // Set a default memory value
    cpus '1'
    conda '/home/felix/miniconda3/envs/spice_env'
    input:
        val species          // String: Species name
        val release         // Integer: Ensembl release version
        val outdir             // Path: Output directory
        val test_mode       // Boolean: Whether to run in test mode


    output:
        
        path "library/spice_lib_*", emit: library_ch // Declare the generated directory as output


    publishDir "${outdir}", mode: 'copy'

    script:
    """
    mkdir -p library  

    python ${projectDir}/tools/SPICE/spice_library.py \
        --outdir library \
        --species '${species}' \
        --release '${release}' \
        ${test_mode ? '--test' : ''}
        
    """
}


process FAS_ANNOTATION {
    queue 'all'
    executor 'slurm'
    cpus '16'
    conda '/home/felix/miniconda3/envs/spice_env'
    input:
        path anno_tools         // Path: Path to annotation tools file
        path spice_library_dir   // Path: Library generated by spice_library.py
        val test_mode           // Boolean: Whether to run in test mode
        val outdir             // Path: Output directory


    output:
        path "${spice_library_dir}", emit: annotated_library_ch // Declare the generated directory as output


    publishDir "${outdir}/annotated_library", mode: 'copy'

    script:
    """
    mkdir -p ${outdir}/annotated_library  
    

    # Replace annoTools.txt in spice_library_dir with the one from anno_tools
    cp "${anno_tools}/annoTools.txt" "${spice_library_dir}/fas_data/annoTools.txt"


    # run the annotaion
    source "${anno_tools}/fas.profile"

    fas.doAnno \
        -i "${spice_library_dir}/transcript_data/transcript_set.fasta" \
        -o "${spice_library_dir}/fas_data/" \
        -t "${anno_tools}" \
        -n annotations \
        --cpus ${task.cpus} \
        
    """
}

process GET_DOMAIN_IMPORTANCE {
    executor 'local'
    cpus '1'
    conda '/home/felix/miniconda3/envs/spice_env'
    input: 
        path annotated_library // Path: Output from previous step
        val outdir             // Path: Output directory
    
    output:
        path "${annotated_library}", emit: domain_importance_library_ch

    publishDir "${outdir}/domain_importance_library", mode: 'copy'

    script:
    """
    mkdir -p ${outdir}/domain_importance_library 

    python ${projectDir}/tools/SPICE/get_domain_importance.py \
    -i "${annotated_library}/fas_data/annotations.json" \
    -o "${annotated_library}/fas_data/"
    """
}

process RESTRUCTURE_ANNO {
    executor 'local'
    cpus '1'
    conda '/home/felix/miniconda3/envs/spice_env'
    input: 
        path domain_importance_library // Path: Output from previous step
        val outdir             // Path: Output directory
    
    output:
        path "${domain_importance_library}", emit: restructured_library_ch
        path "${domain_importance_library}/transcript_data/genes.txt", emit: genes_txt_ch

    publishDir "${outdir}/restructured_library", mode: 'copy'

    script:
    """
    mkdir -p ${outdir}/restructured_library

    python ${projectDir}/tools/SPICE/restructure_anno.py \
    -i "${domain_importance_library}/fas_data/annotations.json" \
    -o "${domain_importance_library}/fas_data/"
    """
}

process FAS_SCORE_CALCULATION {
    executor 'slurm'
    maxForks 10
    queue 'inteli7'
    cpus '2'
    memory '2G'
    conda '/home/felix/miniconda3/envs/spice_env'
    tag "$gene_id"

    input:
        val gene_id // Each gene ID from genes.txt
        path spice_library // Directory containing all necessary files
        val outdir // Output directory path

    output:
        path "${spice_library}/fas_data/tmp/pairwise/${gene_id}/${gene_id}.tsv", emit: gene_tsv_ch, optional: true

    script:
    """
    # Ensure output directory exists
    mkdir -p "${spice_library}/fas_data/tmp/fas_out/${gene_id}"
    mkdir -p "${spice_library}/fas_data/tmp/pairwise/${gene_id}"
    
    # Run FASResultHandler to unpack and process the gene
    python ${projectDir}/tools/SPICE/FASResultHandler.py \
        --pairings_path ${spice_library}/transcript_data/transcript_pairings.json \
        --gene_id ${gene_id} \
        --mode unpack \
        --out_dir "${spice_library}/fas_data/tmp/pairwise/${gene_id}"

    if [ -f "${spice_library}/fas_data/tmp/pairwise/${gene_id}/${gene_id}.tsv" ]; then
        # Run FAS analysis using fas.run
        fas.run \
            --seed "${spice_library}/transcript_data/annotations.fasta" \
            --query "${spice_library}/transcript_data/annotations.fasta" \
            --annotation_dir "${spice_library}/fas_data" \
            --out_dir "${spice_library}/fas_data/tmp/fas_out/${gene_id}" \
            --bidirectional \
            --pairwise "${spice_library}/fas_data/tmp/pairwise/${gene_id}/${gene_id}.tsv" \
            --out_name "${gene_id}" \
            --tsv \
            --phyloprofile "${spice_library}/transcript_data/phyloprofile_ids.tsv" \
            --empty_as_1 \
            --featuretypes "${spice_library}/fas_data/annoTools.txt"
    else
        echo "File "${gene_id}.tsv" does not exist. Skipping the command."
    fi
    """
}

process FAS_RESULT_COLLECTION {
    executor 'local'
    cpus '1'
    memory '7G'
    conda '/home/felix/miniconda3/envs/spice_env'
    tag 'result_collection'

    input:
        path spice_library // Directory containing all necessary files
        val outdir // Output directory path
        path gene_tsv_ch // Gathered fas score directories

    script:
    """
    # Run the concat mode to gather results
    python ${projectDir}/tools/SPICE/FASResultHandler.py \
        --mode concat \
        --out_dir "${spice_library}/fas_data/tmp" \
        --anno_dir "${spice_library}/fas_data"

    # Run the delete mode to clean up temporary files
    python ${projectDir}/tools/SPICE/FASResultHandler.py \
        --mode delete \
        --out_dir "${spice_library}/fas_data/tmp"
    """
}


process CREATE_RESULT_DIRECTORY {
    executor 'local'
    cpus '1'
    memory '7G'
    conda '/home/felix/miniconda3/envs/spice_env'
    

    input:
        path spice_library // Directory containing all necessary files
        val outdir // Output directory path
        val fas_scores
    
    output:
        path "result_directory", emit: result_directory_ch

    publishDir "${outdir}/result_directory", mode: 'copy'

    script:
    """
    mkdir -p "result_directory"

    python ${projectDir}/tools/SPICE/spice_result.py \
    -m setup \
    -l ${spice_library} \
    -o "result_directory"
    """
}

